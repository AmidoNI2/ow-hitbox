settings
{
	modes
	{
		disabled Assault
		{
			Limit Roles: 2 Of Each Role Per Team
		}

		disabled Control
		{
			Limit Roles: 2 Of Each Role Per Team
		}

		disabled Escort
		{
			Limit Roles: 2 Of Each Role Per Team
		}

		disabled Hybrid
		{
			Limit Roles: 2 Of Each Role Per Team
		}

		Practice Range
		{
			Hero Limit: Off
			Training Partner: Off
		}

		Team Deathmatch
		{
			enabled maps
			{
			}
		}
	}

	heroes
	{
		Team 1
		{
			McCree
			{
				Combat Roll: Off
				Flashbang: Off
				No Ammunition Requirement: On
				Quick Melee: Off
				Secondary Fire: Off
				Ultimate Ability Deadeye: Off
			}
		}

		General
		{
			enabled heroes
			{
				McCree
			}
		}
	}
}

variables
{
	global:
		0: horz
		1: vert
		2: magni
		3: type
		4: nav_dir
		5: nav_v
		6: nav_h
		7: pause
		8: angle360
		9: cam_center
		10: cam_offset

	player:
		0: eye
		1: horz
		2: vert
		3: unit
		4: category
		5: nav_dir
		6: exp_horz
		7: exp_vert
}

subroutines
{
	0: teleport_roadhog
	1: save_info
}

rule("global")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Global.horz = 58.550;
		Global.vert = -7.280;
		Global.nav_dir = 0;
		Global.magni = 0.010;
		disabled Create Dummy Bot(Hero(Roadhog), Team 2, 5, Vector(84.190, -0.577, 5.297), Vector(0, 0, 0));
		Set Gravity(Players In Slot(5, Team 2), 0);
		disabled Global.nav_v = Array(0.100, 0, -0.100, 0);
		disabled Global.nav_h = Array(0, -0.100, 0, 0.100);
		disabled Global.nav_v = Array(0.200, 0, -0.200, 0);
		disabled Global.nav_h = Array(0, -0.200, 0, 0.200);
		Global.nav_v = Array(0.020, 0, -0.020, 0);
		Global.nav_h = Array(0, -0.020, 0, 0.020);
		Global.angle360 = 359;
		Global.cam_center = Vector(92.661, -0.611, -7.458);
		Global.cam_offset = Vector(0, 0, 3);
	}
}

disabled rule("player settings")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		disabled Set Gravity(Event Player, 0);
		Wait(1, Ignore Condition);
		Create HUD Text(Event Player, String("{0} {1} {2}", Custom String("angle"), Global.horz, Global.vert), Null, Null, Top, 90, White,
			White, White, Visible To and String, Default Visibility);
		Set Damage Dealt(Event Player, 0.001);
		"scan 6"
		Teleport(Event Player, Vector(90.790, -0.574, -9.069));
		"scan 5"
		disabled Teleport(Event Player, Vector(91.783, -0.577, -6.767));
		"scan #4"
		disabled Teleport(Event Player, Vector(91.735, -3.287, -10.115));
		"front (scan #1)"
		disabled Teleport(Event Player, Vector(91.477, -0.577, -5.832));
		"left scan (scan #2)"
		disabled Teleport(Event Player, Vector(91.182, -0.577, -8.442));
		"scan #3"
		disabled Teleport(Event Player, Vector(93.211, -3.200, -8.968));
		Start Facing(Event Player, Direction From Angles(Global.horz, Global.vert), 10000, To World, Direction and Turn Rate);
		Set Move Speed(Event Player, 0);
		disabled Start Holding Button(Event Player, Crouch);
		Create HUD Text(Event Player, String("#{0}", Vertical Facing Angle Of(Event Player)), Null, Null, Top, 0, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("#{0}", Horizontal Facing Angle Of(Event Player)), Null, Null, Top, 0, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("-> {0}", Global.type), Null, Null, Top, 0, White, White, White, Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, String("({0})", Global.angle360), Null, Null, Top, 0, White, White, White, Visible To and String,
			Default Visibility);
		Create HUD Text(Event Player, String("#{0}", 10000 * Position Of(Event Player)), Null, Null, Top, 0, White, White, White,
			Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("#{0}"), Null, Null, Top, 0, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("#{0}"), Null, Null, Top, 0, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("#{0}"), Null, Null, Top, 0, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("#{0}"), Null, Null, Top, 0, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("#{0}"), Null, Null, Top, 0, White, White, White, Visible To and String, Default Visibility);
		Create HUD Text(Event Player, String("#{0}"), Null, Null, Top, 0, White, White, White, Visible To and String, Default Visibility);
	}
}

rule("horz + (left)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 1) == True;
	}

	actions
	{
		Global.horz += Global.magni;
		Wait(0.200, Abort When False);
		Loop;
	}
}

rule("horz - (right)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ability 2) == True;
	}

	actions
	{
		Global.horz -= Global.magni;
		Wait(0.200, Abort When False);
		Loop;
	}
}

rule("vert + (down)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Melee) == True;
	}

	actions
	{
		Global.vert += Global.magni;
		Wait(0.200, Abort When False);
		Loop;
	}
}

rule("vert - (up)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Reload) == True;
	}

	actions
	{
		Global.vert -= Global.magni;
		Wait(0.200, Abort When False);
		Loop;
	}
}

rule("sub save")
{
	event
	{
		Subroutine;
		save_info;
	}

	actions
	{
		Event Player.eye = 10000 * Eye Position(Event Player);
		Event Player.horz = 10000 * Horizontal Facing Angle Of(Event Player);
		Event Player.vert = 10000 * Vertical Facing Angle Of(Event Player);
		Event Player.unit = 10000 * Facing Direction Of(Event Player);
		Event Player.category = Global.type;
		Event Player.nav_dir = Global.nav_dir;
		Event Player.exp_horz = Global.horz;
		Event Player.exp_vert = Global.vert;
		Enable Inspector Recording;
		Disable Inspector Recording;
	}
}

rule("sub teleport roadhog")
{
	event
	{
		Subroutine;
		teleport_roadhog;
	}

	actions
	{
		Teleport(Players In Slot(5, Team 2), Eye Position(Event Player) + Facing Direction Of(Event Player) * 5.900 - World Vector Of(
			Vector(0, 1, 0), Event Player, Rotation));
	}
}

disabled rule("main loop all")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction From Angles(Global.horz, Global.vert), 10000, To World, Direction and Turn Rate);
		For Global Variable(horz, 166, 174, 0.100);
			For Global Variable(vert, -2.750, 6, 0.010);
				Global.type = 0;
				Call Subroutine(teleport_roadhog);
				Wait(0.500, Ignore Condition);
				Press Button(Event Player, Primary Fire);
				Wait(0.100, Ignore Condition);
				Call Subroutine(save_info);
				Call Subroutine(teleport_roadhog);
				Wait(0.150, Ignore Condition);
			End;
		End;
		Stop Camera(Event Player);
	}
}

rule("set type 1 (damaged roadhog)")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		Global.type = 1;
	}
}

disabled rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Event Player.eye = Position Of(Event Player) * 10000;
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("change magnitude")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ultimate) == True;
	}

	actions
	{
		Global.magni = 1;
	}
}

rule("change magnitude back to 0.1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Ultimate) != True;
	}

	actions
	{
		Global.magni = 0.010;
	}
}

disabled rule("rubbish")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Global.horz = 166;
		Start Facing(Event Player, Direction From Angles(Global.horz, Global.vert), 10000, To World, Direction and Turn Rate);
		Wait(1, Ignore Condition);
		Call Subroutine(teleport_roadhog);
		While(Global.horz <= 174);
			Global.type = 0;
			Call Subroutine(teleport_roadhog);
			Wait(0.500, Ignore Condition);
			Press Button(Event Player, Primary Fire);
			Wait(0.100, Ignore Condition);
			Call Subroutine(save_info);
			Call Subroutine(teleport_roadhog);
			If(Global.type == 0);
				Global.vert = -2.330;
				Global.horz += 0.010;
			Else;
				Global.vert += 0.010;
			End;
			Wait(0.150, Ignore Condition);
		End;
		Stop Camera(Event Player);
	}
}

rule("main loop new")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
	}

	actions
	{
		Start Facing(Event Player, Direction From Angles(Global.horz, Global.vert), 10000, To World, Direction and Turn Rate);
		Wait(1, Ignore Condition);
		Call Subroutine(teleport_roadhog);
		"infinte loop"
		While(Global.pause == 0);
			Global.type = 0;
			Call Subroutine(teleport_roadhog);
			Wait(0.500, Ignore Condition);
			Press Button(Event Player, Primary Fire);
			Wait(0.100, Ignore Condition);
			Call Subroutine(save_info);
			Call Subroutine(teleport_roadhog);
			"hit training bot"
			If(Global.type == 0);
				Global.horz += Global.nav_h[(Global.nav_dir + 2) % 4];
				Global.horz += Global.nav_h[(Global.nav_dir + 3) % 4];
				Global.vert += Global.nav_v[(Global.nav_dir + 2) % 4];
				Global.vert += Global.nav_v[(Global.nav_dir + 3) % 4];
				Global.nav_dir += 3;
				Global.nav_dir %= 4;
			Else;
				Global.nav_dir += 1;
				Global.nav_dir %= 4;
				Global.horz += Global.nav_h[Global.nav_dir];
				Global.vert += Global.nav_v[Global.nav_dir];
			End;
			Wait(0.200, Ignore Condition);
		End;
		Stop Camera(Event Player);
	}
}

disabled rule("Pause")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Global.pause = 1;
		Wait(3, Ignore Condition);
		Global.pause = 0;
	}
}

rule("360 cam")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Secondary Fire) == True;
	}

	actions
	{
		Start Camera(Event Player, Global.cam_center + Vector(2.950 * Sine From Degrees(360 - Global.angle360), 0,
			2.950 * Cosine From Degrees(360 - Global.angle360)), Global.cam_center, 0);
		Global.angle360 = (Global.angle360 + 1) % 360;
		Set Slow Motion(10);
	}
}